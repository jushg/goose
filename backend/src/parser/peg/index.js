// @generated by Peggy 4.0.2.
//
// https://peggyjs.org/




function makeStringType() {
    return { tag: "TYPE", type: { base: "STR" } };
}
function makeBoolType() {
    return { tag: "TYPE", type: { base: "BOOL" } };
}
function makeIntType() {
    return { tag: "TYPE", type: { base: "INT" } };
}
function makePtrType(inner) {
    return { tag: "TYPE", type: { base: "PTR", inner } };
}
function makeArrayType(len, inner) {
    return { tag: "TYPE", type: { base: "ARRAY", len, inner } };
}
function makeChanType(inner, mode) {
    return { tag: "TYPE", type: { base: "CHAN", inner, mode } };
}
function makeChanDualType(inner) {
    return makeChanType(inner, "DUAL");
}
function makeChanInType(inner) {
    return makeChanType(inner, "IN");
}
function makeChanOutType(inner) {
    return makeChanType(inner, "OUT");
}
function makeFunctionType(inputT, returnT) {
    return { tag: "TYPE", type: { base: "FUNC", inputT, returnT } };
}
function makeIdent(val) {
    return { tag: "IDENT", val };
}
function makeBlock(stmts) {
    return { tag: "BLOCK", stmts };
}
function makeConstDecl(ident, type, val) {
    return { tag: "STMT", stmtType: "CONST_DECL", ident, type, val };
}
function makeVarDecl(ident, type, val) {
    return { tag: "STMT", stmtType: "VAR_DECL", ident, type, val };
}
function makeFuncDecl(ident, input, returnT, body) {
    return { tag: "STMT", stmtType: "FUNC_DECL", ident, input, returnT, body };
}
function makeBoolLiteral(val) {
    return { tag: "LITERAL", type: { tag: "TYPE", type: { base: "BOOL" } }, val };
}
function makeIntLiteralObj(val) {
    return { tag: "LITERAL", type: { tag: "TYPE", type: { base: "INT" } }, val };
}
function makeStrLiteralObj(val) {
    return { tag: "LITERAL", type: { tag: "TYPE", type: { base: "STR" } }, val };
}
function makeNilLiteralObj() {
    return { tag: "LITERAL", type: { tag: "TYPE", type: { base: "NIL" } } };
}
function makeFuncLiteral(inputT, returnT, body) {
    return { tag: "LITERAL", type: makeFunctionType(inputT, returnT), body };
}
function primaryExprReduceHelper(expr, op) {
    if (op.tag === "SELECTOR") {
        return { tag: "SELECTOR", obj: expr, ident: op.ident };
    }
    else if (op.tag === "INDEX") {
        return { tag: "INDEX", obj: expr, index: op.index };
    }
    else if (op.tag === "CALL") {
        return { tag: "CALL", func: expr, args: op.args };
    }
    else {
        throw "UNKNOWN PRIMARY EXPR TAG";
    }
}
function makeUnaryExpr(expr, op) {
    return { tag: "UNARY_EXPR", expr, op };
}
function makeBinaryExpr(lhs, op, rhs) {
    return { tag: "BINARY_EXPR", lhs, op, rhs };
}
function makeExpressionStmt(expr) {
    return { tag: "STMT", stmtType: "EXPR", expr };
}
function makeChanStmt(lhs, rhs) {
    return { tag: "STMT", stmtType: "SEND", lhs, rhs };
}
function makeIncStmt(expr) {
    return { tag: "STMT", stmtType: "INC", expr };
}
function makeDecStmt(expr) {
    return { tag: "STMT", stmtType: "DEC", expr };
}
function makeAssignmentStmt(lhs, op, rhs) {
    return { tag: "STMT", stmtType: "ASSIGN", lhs, rhs, op };
}
function makeIfStmt(pre, cond, body, elseBody) {
    return { tag: "STMT", stmtType: "IF", pre, cond, body, elseBody };
}
function makeSwitchStmt(pre, cond, cases) {
    return {
        tag: "STMT",
        stmtType: "SWITCH",
        pre,
        cond: cond ?? makeBoolLiteral(true),
        cases,
    };
}
function makeCaseClause(caseExpr, body) {
    return { tag: "CASE_CLAUSE", case: caseExpr, body };
}
function makeForStmt(pre, cond, post, body) {
    return { tag: "STMT", stmtType: "FOR", pre, cond, post, body };
}
function makeBreakStmt(breakLabel) {
    return { tag: "STMT", stmtType: "BREAK", breakLabel };
}
function makeContStmt(contLabel) {
    return { tag: "STMT", stmtType: "CONTINUE", contLabel };
}
function makeGoToStmt(gotoLabel) {
    return { tag: "STMT", stmtType: "GOTO", gotoLabel };
}
function makeFallthroughStmt() {
    return { tag: "STMT", stmtType: "FALLTHROUGH" };
}
function makeDeferStmt(stmt) {
    return { tag: "STMT", stmtType: "DEFER", stmt };
}
function makeGoStmt(expr) {
    return { tag: "STMT", stmtType: "GO", expr };
}
function makeSelectStmt(cases) {
    return { tag: "STMT", stmtType: "SELECT", cases };
}
function makeSelectCase(comm, body) {
    return { tag: "SELECT_CASE", comm, body };
}
function makeReturnStmt(expr) {
    return { tag: "STMT", stmtType: "RETURN", expr };
}



function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { TOPLEVEL: peg$parseTOPLEVEL };
  var peg$startRuleFunction = peg$parseTOPLEVEL;

  var peg$c0 = "\n";
  var peg$c1 = ";";
  var peg$c2 = ":";
  var peg$c3 = ".";
  var peg$c4 = "(";
  var peg$c5 = "[";
  var peg$c6 = "{";
  var peg$c7 = ",";
  var peg$c8 = ")";
  var peg$c9 = "]";
  var peg$c10 = "}";
  var peg$c11 = "+";
  var peg$c12 = "-";
  var peg$c13 = "/";
  var peg$c14 = "=";
  var peg$c15 = "<";
  var peg$c16 = ">";
  var peg$c17 = "&";
  var peg$c18 = "!";
  var peg$c19 = "^";
  var peg$c20 = "%";
  var peg$c21 = "|";
  var peg$c22 = "_";
  var peg$c23 = "*";
  var peg$c24 = "//";
  var peg$c25 = "/*";
  var peg$c26 = "*/";
  var peg$c27 = "string";
  var peg$c28 = "int";
  var peg$c29 = "bool";
  var peg$c30 = "chan";
  var peg$c31 = "func";
  var peg$c32 = "const";
  var peg$c33 = "var";
  var peg$c34 = "nil";
  var peg$c35 = "true";
  var peg$c36 = "false";
  var peg$c37 = "\"";
  var peg$c38 = "make";
  var peg$c39 = "new";
  var peg$c40 = "if";
  var peg$c41 = "else";
  var peg$c42 = "switch";
  var peg$c43 = "case";
  var peg$c44 = "default";
  var peg$c45 = "for";
  var peg$c46 = "go";
  var peg$c47 = "select";
  var peg$c48 = "<-";
  var peg$c49 = ":=";
  var peg$c50 = "return";
  var peg$c51 = "break";
  var peg$c52 = "continue";
  var peg$c53 = "goto";
  var peg$c54 = "fallthrough";
  var peg$c55 = "defer";

  var peg$r0 = /^[\n]/;
  var peg$r1 = /^[a-z]/i;
  var peg$r2 = /^[0-9]/;
  var peg$r3 = /^[U+005C]/;
  var peg$r4 = /^[U+0022]/;
  var peg$r5 = /^[U+0027]/;
  var peg$r6 = /^[U+0060]/;
  var peg$r7 = /^[ \t]/;
  var peg$r8 = /^[\r\n]/;
  var peg$r9 = /^[\t -!,.0-9?_]/;

  var peg$e0 = peg$otherExpectation("source file");
  var peg$e1 = peg$otherExpectation("newline");
  var peg$e2 = peg$literalExpectation("\n", false);
  var peg$e3 = peg$classExpectation(["\n"], false, false);
  var peg$e4 = peg$otherExpectation("letter");
  var peg$e5 = peg$classExpectation([["a", "z"]], false, true);
  var peg$e6 = peg$otherExpectation("digit");
  var peg$e7 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e8 = peg$otherExpectation("statement delimiter");
  var peg$e9 = peg$otherExpectation("semicolon");
  var peg$e10 = peg$literalExpectation(";", false);
  var peg$e11 = peg$otherExpectation("colon");
  var peg$e12 = peg$literalExpectation(":", false);
  var peg$e13 = peg$otherExpectation("dot");
  var peg$e14 = peg$literalExpectation(".", false);
  var peg$e15 = peg$otherExpectation("left parenthesis");
  var peg$e16 = peg$literalExpectation("(", false);
  var peg$e17 = peg$otherExpectation("left bracket");
  var peg$e18 = peg$literalExpectation("[", false);
  var peg$e19 = peg$otherExpectation("left brace");
  var peg$e20 = peg$literalExpectation("{", false);
  var peg$e21 = peg$otherExpectation("comma");
  var peg$e22 = peg$literalExpectation(",", false);
  var peg$e23 = peg$otherExpectation("period");
  var peg$e24 = peg$otherExpectation("right parenthesis");
  var peg$e25 = peg$literalExpectation(")", false);
  var peg$e26 = peg$otherExpectation("right bracket");
  var peg$e27 = peg$literalExpectation("]", false);
  var peg$e28 = peg$otherExpectation("right brace");
  var peg$e29 = peg$literalExpectation("}", false);
  var peg$e30 = peg$otherExpectation("plus");
  var peg$e31 = peg$literalExpectation("+", false);
  var peg$e32 = peg$otherExpectation("minus");
  var peg$e33 = peg$literalExpectation("-", false);
  var peg$e34 = peg$otherExpectation("slash");
  var peg$e35 = peg$literalExpectation("/", false);
  var peg$e36 = peg$otherExpectation("backslash");
  var peg$e37 = peg$classExpectation(["U", "+", "0", "0", "5", "C"], false, false);
  var peg$e38 = peg$otherExpectation("equal");
  var peg$e39 = peg$literalExpectation("=", false);
  var peg$e40 = peg$otherExpectation("less than");
  var peg$e41 = peg$literalExpectation("<", false);
  var peg$e42 = peg$otherExpectation("greater than");
  var peg$e43 = peg$literalExpectation(">", false);
  var peg$e44 = peg$otherExpectation("ampersand");
  var peg$e45 = peg$literalExpectation("&", false);
  var peg$e46 = peg$otherExpectation("bang");
  var peg$e47 = peg$literalExpectation("!", false);
  var peg$e48 = peg$otherExpectation("hat");
  var peg$e49 = peg$literalExpectation("^", false);
  var peg$e50 = peg$otherExpectation("percent");
  var peg$e51 = peg$literalExpectation("%", false);
  var peg$e52 = peg$otherExpectation("bar");
  var peg$e53 = peg$literalExpectation("|", false);
  var peg$e54 = peg$otherExpectation("underbar");
  var peg$e55 = peg$literalExpectation("_", false);
  var peg$e56 = peg$otherExpectation("asterisk");
  var peg$e57 = peg$literalExpectation("*", false);
  var peg$e58 = peg$otherExpectation("double quote");
  var peg$e59 = peg$classExpectation(["U", "+", "0", "0", "2", "2"], false, false);
  var peg$e60 = peg$otherExpectation("single quote");
  var peg$e61 = peg$classExpectation(["U", "+", "0", "0", "2", "7"], false, false);
  var peg$e62 = peg$otherExpectation("back quote/grave accent");
  var peg$e63 = peg$classExpectation(["U", "+", "0", "0", "6", "0"], false, false);
  var peg$e64 = peg$otherExpectation("not");
  var peg$e65 = peg$otherExpectation("neg");
  var peg$e66 = peg$otherExpectation("shift left");
  var peg$e67 = peg$otherExpectation("shift right");
  var peg$e68 = peg$otherExpectation("or");
  var peg$e69 = peg$otherExpectation("xor");
  var peg$e70 = peg$otherExpectation("and");
  var peg$e71 = peg$otherExpectation("and not");
  var peg$e72 = peg$otherExpectation("add");
  var peg$e73 = peg$otherExpectation("subtract");
  var peg$e74 = peg$otherExpectation("multiply");
  var peg$e75 = peg$otherExpectation("quotient");
  var peg$e76 = peg$otherExpectation("remainder");
  var peg$e77 = peg$otherExpectation("logical AND");
  var peg$e78 = peg$otherExpectation("logical OR");
  var peg$e79 = peg$otherExpectation("arrow");
  var peg$e80 = peg$otherExpectation("increment");
  var peg$e81 = peg$otherExpectation("decrement");
  var peg$e82 = peg$otherExpectation("not equal");
  var peg$e83 = peg$otherExpectation("less or equal");
  var peg$e84 = peg$otherExpectation("greater or equal");
  var peg$e85 = peg$otherExpectation("define");
  var peg$e86 = peg$otherExpectation("ellipsis");
  var peg$e87 = peg$otherExpectation("assign");
  var peg$e88 = peg$otherExpectation("assign: add");
  var peg$e89 = peg$otherExpectation("assign: subtract");
  var peg$e90 = peg$otherExpectation("assign: multiply");
  var peg$e91 = peg$otherExpectation("assign: quotient");
  var peg$e92 = peg$otherExpectation("assign: remainder");
  var peg$e93 = peg$otherExpectation("assign: logical AND");
  var peg$e94 = peg$otherExpectation("assign: logical OR");
  var peg$e95 = peg$otherExpectation("assign: logical XOR");
  var peg$e96 = peg$otherExpectation("assign: logical AND NOT");
  var peg$e97 = peg$otherExpectation("assign: shift left");
  var peg$e98 = peg$otherExpectation("assign: shift right");
  var peg$e99 = peg$otherExpectation("address");
  var peg$e100 = peg$otherExpectation("resolve reference");
  var peg$e101 = peg$otherExpectation("white space");
  var peg$e102 = peg$classExpectation([" ", "\t"], false, false);
  var peg$e103 = peg$otherExpectation("end-of-line comment");
  var peg$e104 = peg$literalExpectation("//", false);
  var peg$e105 = peg$classExpectation(["\r", "\n"], false, false);
  var peg$e106 = peg$anyExpectation();
  var peg$e107 = peg$otherExpectation("multiline-comment");
  var peg$e108 = peg$literalExpectation("/*", false);
  var peg$e109 = peg$literalExpectation("*/", false);
  var peg$e110 = peg$otherExpectation("identifier");
  var peg$e111 = peg$otherExpectation("type");
  var peg$e112 = peg$otherExpectation("type name");
  var peg$e113 = peg$literalExpectation("string", false);
  var peg$e114 = peg$literalExpectation("int", false);
  var peg$e115 = peg$literalExpectation("bool", false);
  var peg$e116 = peg$otherExpectation("type literal");
  var peg$e117 = peg$otherExpectation("pointer type");
  var peg$e118 = peg$otherExpectation("array type");
  var peg$e119 = peg$otherExpectation("channel type");
  var peg$e120 = peg$otherExpectation("chan-dual type");
  var peg$e121 = peg$literalExpectation("chan", false);
  var peg$e122 = peg$otherExpectation("chan-out type");
  var peg$e123 = peg$otherExpectation("chan-in type");
  var peg$e124 = peg$otherExpectation("function type");
  var peg$e125 = peg$literalExpectation("func", false);
  var peg$e126 = peg$otherExpectation("function parameter type");
  var peg$e127 = peg$otherExpectation("block");
  var peg$e128 = peg$otherExpectation("statement list");
  var peg$e129 = peg$otherExpectation("declaration");
  var peg$e130 = peg$otherExpectation("top-level declaration");
  var peg$e131 = peg$otherExpectation("constant declaration");
  var peg$e132 = peg$literalExpectation("const", false);
  var peg$e133 = peg$otherExpectation("variable declaration");
  var peg$e134 = peg$literalExpectation("var", false);
  var peg$e135 = peg$otherExpectation("function parameters");
  var peg$e136 = peg$otherExpectation("function declaration");
  var peg$e137 = peg$otherExpectation("operand");
  var peg$e138 = peg$otherExpectation("literal");
  var peg$e139 = peg$otherExpectation("nil literal");
  var peg$e140 = peg$literalExpectation("nil", false);
  var peg$e141 = peg$otherExpectation("bool literal");
  var peg$e142 = peg$literalExpectation("true", false);
  var peg$e143 = peg$literalExpectation("false", false);
  var peg$e144 = peg$otherExpectation("integer literal");
  var peg$e145 = peg$otherExpectation("string literal");
  var peg$e146 = peg$literalExpectation("\"", false);
  var peg$e147 = peg$classExpectation(["\t", [" ", "!"], ",", ".", ["0", "9"], "?", "_"], false, false);
  var peg$e148 = peg$otherExpectation("function literal");
  var peg$e149 = peg$otherExpectation("primary expression");
  var peg$e150 = peg$literalExpectation("make", false);
  var peg$e151 = peg$literalExpectation("new", false);
  var peg$e152 = peg$otherExpectation("selector in expression");
  var peg$e153 = peg$otherExpectation("index in expression");
  var peg$e154 = peg$otherExpectation("arguments");
  var peg$e155 = peg$otherExpectation("expression");
  var peg$e156 = peg$otherExpectation("unary expression");
  var peg$e157 = peg$otherExpectation("binary expression level 5");
  var peg$e158 = peg$otherExpectation("binary expression level 4");
  var peg$e159 = peg$otherExpectation("binary expression level 3");
  var peg$e160 = peg$otherExpectation("binary expression level 2");
  var peg$e161 = peg$otherExpectation("binary expression level 1");
  var peg$e162 = peg$otherExpectation("unary operator");
  var peg$e163 = peg$otherExpectation("comparison operator");
  var peg$e164 = peg$otherExpectation("addition operator");
  var peg$e165 = peg$otherExpectation("multiplication operator");
  var peg$e166 = peg$otherExpectation("statement");
  var peg$e167 = peg$otherExpectation("simple statement");
  var peg$e168 = peg$otherExpectation("unlabeled statement");
  var peg$e169 = peg$otherExpectation("labeled statement");
  var peg$e170 = peg$otherExpectation("expression statement");
  var peg$e171 = peg$otherExpectation("chan-statement");
  var peg$e172 = peg$otherExpectation("increment/decrement statement");
  var peg$e173 = peg$otherExpectation("assignment");
  var peg$e174 = peg$otherExpectation("'if' statement");
  var peg$e175 = peg$literalExpectation("if", false);
  var peg$e176 = peg$otherExpectation("pre-clause");
  var peg$e177 = peg$otherExpectation("else clause");
  var peg$e178 = peg$literalExpectation("else", false);
  var peg$e179 = peg$otherExpectation("expression of 'switch' statement");
  var peg$e180 = peg$literalExpectation("switch", false);
  var peg$e181 = peg$otherExpectation("expression of 'case' clause");
  var peg$e182 = peg$otherExpectation("expression of switch's 'case'");
  var peg$e183 = peg$literalExpectation("case", false);
  var peg$e184 = peg$literalExpectation("default", false);
  var peg$e185 = peg$otherExpectation("'for' statement");
  var peg$e186 = peg$literalExpectation("for", false);
  var peg$e187 = peg$otherExpectation("'for' clause");
  var peg$e188 = peg$otherExpectation("'go' statement");
  var peg$e189 = peg$literalExpectation("go", false);
  var peg$e190 = peg$otherExpectation("'select' statement");
  var peg$e191 = peg$literalExpectation("select", false);
  var peg$e192 = peg$otherExpectation("communication-clause");
  var peg$e193 = peg$otherExpectation("communication 'case'");
  var peg$e194 = peg$literalExpectation("<-", false);
  var peg$e195 = peg$literalExpectation(":=", false);
  var peg$e196 = peg$otherExpectation("'return' statement");
  var peg$e197 = peg$literalExpectation("return", false);
  var peg$e198 = peg$otherExpectation("'break' statement");
  var peg$e199 = peg$literalExpectation("break", false);
  var peg$e200 = peg$otherExpectation("'continue' statement");
  var peg$e201 = peg$literalExpectation("continue", false);
  var peg$e202 = peg$otherExpectation("'goto' statement");
  var peg$e203 = peg$literalExpectation("goto", false);
  var peg$e204 = peg$otherExpectation("'fallthrough' statement");
  var peg$e205 = peg$literalExpectation("fallthrough", false);
  var peg$e206 = peg$otherExpectation("'defer' statement");
  var peg$e207 = peg$literalExpectation("defer", false);
  var peg$e208 = peg$otherExpectation("end-of-file");

  var peg$f0 = function(a) { return a.map(aa => aa[0]); };
  var peg$f1 = function() { return '<<' };
  var peg$f2 = function() { return '>>' };
  var peg$f3 = function() { return '&^' };
  var peg$f4 = function() { return '&&' };
  var peg$f5 = function() { return '||' };
  var peg$f6 = function() { return '<-' };
  var peg$f7 = function() { return '++' };
  var peg$f8 = function() { return '--' };
  var peg$f9 = function() { return '==' };
  var peg$f10 = function() { return '!=' };
  var peg$f11 = function() { return '<=' };
  var peg$f12 = function() { return '>=' };
  var peg$f13 = function() { return ':=' };
  var peg$f14 = function() { return '...' };
  var peg$f15 = function() { return '+=' };
  var peg$f16 = function() { return '-=' };
  var peg$f17 = function() { return '*=' };
  var peg$f18 = function() { return '/=' };
  var peg$f19 = function() { return '%=' };
  var peg$f20 = function() { return '&=' };
  var peg$f21 = function() { return '|=' };
  var peg$f22 = function() { return '^=' };
  var peg$f23 = function() { return '&^=' };
  var peg$f24 = function() { return '<<=' };
  var peg$f25 = function() { return '>>=' };
  var peg$f26 = function(content) { return { tag: 'COMMENT_LINE', content: content.map(x => x[1]).join('').trim() } };
  var peg$f27 = function(content) { return { tag: 'COMMENT_MULTI', content: content.map(x => x[1]).join('').trim() } };
  var peg$f28 = function(x, y) { return makeIdent(x + y.join('')); };
  var peg$f29 = function(val) { return val == 'string' ? makeStringType() : val == 'int' ? makeIntType() : makeBoolType()};
  var peg$f30 = function(inner) { return makePtrType(inner); };
  var peg$f31 = function(len, elementType) { return makeArrayType(len, elementType);};
  var peg$f32 = function(inner) { return makeChanDualType(inner) };
  var peg$f33 = function(inner) { return makeChanOutType(inner) };
  var peg$f34 = function(inner) { return makeChanInType(inner) };
  var peg$f35 = function(inputT, returnT) { return makeFunctionType(inputT, returnT) };
  var peg$f36 = function(a, b) { return [a, ...(b.map(bb => bb[3]))] };
  var peg$f37 = function() { return []; };
  var peg$f38 = function(stmts) { return makeBlock(stmts); };
  var peg$f39 = function(v) { return v.map(vv => vv[0]) };
  var peg$f40 = function(ident, identType, expr) { return makeConstDecl(ident, identType, expr) };
  var peg$f41 = function(ident, identType, expr) { return makeVarDecl(ident, identType, (expr ?? [null, null])[1]); };
  var peg$f42 = function(a, bs, type) { return [ { ident: a, type }, ...(bs.map(bb => { return { ident: bb[2], type } }))] };
  var peg$f43 = function(a, b) { return [a, ...(b.map(bb => bb[2]))] };
  var peg$f44 = function() { return []; };
  var peg$f45 = function(ident, inputParam, returnT, body) { return makeFuncDecl(ident, inputParam, returnT, body) };
  var peg$f46 = function(v) { return v; };
  var peg$f47 = function(v) { return v; };
  var peg$f48 = function(v) { return v; };
  var peg$f49 = function() { return makeNilLiteralObj() };
  var peg$f50 = function(v) { return makeBoolLiteral(v === "true") };
  var peg$f51 = function(a, b) { return makeIntLiteralObj(Number(a + b.filter(bb=> bb !== "_").map(i => i[1]).join(''))) };
  var peg$f52 = function(content) { return makeStrLiteralObj(content.join('')) };
  var peg$f53 = function(inputT, returnT, body) { return makeFuncLiteral(inputT, returnT, body ) };
  var peg$f54 = function(fn, arg1, rest) {
    const args = [arg1, ...(rest.map(r => r[2]))]
    return { tag: fn === "make" ? "MAKE" : "NEW", args }
  };
  var peg$f55 = function(a, b) {
    // Note the '*' makes a standalone Operand a valid PrimaryExpr.
    return b.reduce(primaryExprReduceHelper, a);
  };
  var peg$f56 = function(ident) { return { tag: "SELECTOR", ident } };
  var peg$f57 = function(index) { return { tag: "INDEX", index } };
  var peg$f58 = function() { return { tag: "CALL", args: [] } };
  var peg$f59 = function(arg1, rest) {
    const args = [arg1, ...(rest.map(r => r[2]))]
    return { tag: "CALL", args }
  };
  var peg$f60 = function(b, a) {
    // Note the '*' makes a standalone PrimaryExpr (which itself could be a standalone Operand)
    // a valid UnaryExpr.
    // Note as per golang spec ++ and -- are outside operator hierarchy as they
    // form statements (E.g. p++ +p counts as two statements 'p++' and '+p').
    // All unary operators are right-associative, and pre-fix.
    b = b.map(bb => bb[0]).reverse();
    return b.reduce(makeUnaryExpr, a);
  };
  var peg$f61 = function(a, b) {
    // Note the '*' makes a standalone UnaryExpr a valid BinaryExprL5.
    return b.reduce((acc, curr) => makeBinaryExpr(acc, curr[0], curr[2]), a);
  };
  var peg$f62 = function(a, b) {
    return b.reduce((acc, curr) => makeBinaryExpr(acc, curr[0], curr[2]), a);
  };
  var peg$f63 = function(a, b) {
    return b.reduce((acc, curr) => makeBinaryExpr(acc, curr[0], curr[2]), a);
  };
  var peg$f64 = function(a, b) {
    return b.reduce((acc, curr) => makeBinaryExpr(acc, curr[0], curr[2]), a);
  };
  var peg$f65 = function(a, b) {
    return b.reduce((acc, curr) => makeBinaryExpr(acc, curr[0], curr[2]), a);
  };
  var peg$f66 = function() { return '+' };
  var peg$f67 = function() { return '-' };
  var peg$f68 = function() { return '!' };
  var peg$f69 = function() { return '^' };
  var peg$f70 = function() { return '&' };
  var peg$f71 = function() { return '*' };
  var peg$f72 = function() { return '<-' };
  var peg$f73 = function(label, stmt) { stmt.label = label; return stmt; };
  var peg$f74 = function(expr) { return makeExpressionStmt(expr) };
  var peg$f75 = function(lhs, rhs) { return makeChanStmt(lhs, rhs) };
  var peg$f76 = function(expr) { return makeIncStmt(expr) };
  var peg$f77 = function(expr) { return makeDecStmt(expr) };
  var peg$f78 = function(lhs, c, rhs) { return makeAssignmentStmt(lhs, c ? ":=" : "=", rhs) };
  var peg$f79 = function(pre, cond, block, elseB) { return makeIfStmt(pre, cond, block, elseB) };
  var peg$f80 = function(a) { return a };
  var peg$f81 = function(block) { return block };
  var peg$f82 = function(pre, expr, cases) { return makeSwitchStmt(pre, expr, cases.map(cc => cc[0])) };
  var peg$f83 = function(a, b) { return makeCaseClause(a, b.map(bb => bb[0])) };
  var peg$f84 = function(a, b) { return makeCaseClause(a, [b]) };
  var peg$f85 = function(a) { return a; };
  var peg$f86 = function() { return "DEFAULT"; };
  var peg$f87 = function(clause, body) { return makeForStmt(clause.pre, clause.cond, clause.post, body) };
  var peg$f88 = function(body) { return makeForStmt(null, null, null, body)};
  var peg$f89 = function(pre, cond, post) { return { tag: "FOR_CLAUSE", pre, cond, post } };
  var peg$f90 = function(cond) { return { tag: "FOR_CLAUSE", pre: null, cond, post: null } };
  var peg$f91 = function(expr) { return makeGoStmt(expr) };
  var peg$f92 = function(cases) { return makeSelectStmt(cases.map(cc => cc[0])) };
  var peg$f93 = function(caseCl, b) { return makeSelectCase(caseCl, b.map(bb => bb[0])) };
  var peg$f94 = function(caseCl, b) { return makeSelectCase(caseCl, [b]) };
  var peg$f95 = function(a) { return { recvCh: a }; };
  var peg$f96 = function(a, b) { return { sendCh: a, val: b }; };
  var peg$f97 = function(a, op, b) { return { recvCh: b, to: a, op }; };
  var peg$f98 = function() { return "DEFAULT"; };
  var peg$f99 = function(expr) { return makeReturnStmt(expr) };
  var peg$f100 = function(label) { return makeBreakStmt(label) };
  var peg$f101 = function(label) { return makeContStmt(label) };
  var peg$f102 = function(label) { return makeGoToStmt(label) };
  var peg$f103 = function() { return makeFallthroughStmt() };
  var peg$f104 = function(expr) { return makeDeferStmt(expr) };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseTOPLEVEL() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseBD();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseTopLevelDecl();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseBD();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseTopLevelDecl();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseBD();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s3 = peg$parseEOF();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f0(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    return s0;
  }

  function peg$parseNEWLINE() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 10) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWS();
      if (s3 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 10) {
          s3 = peg$c0;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseWS();
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 10) {
            s3 = peg$c0;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = [];
      s1 = input.charAt(peg$currPos);
      if (peg$r0.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r0.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

    return s0;
  }

  function peg$parseLETTER() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r1.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

    return s0;
  }

  function peg$parseDIGIT() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r2.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }

    return s0;
  }

  function peg$parseBD() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseWS();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseWS();
    }
    s2 = peg$parseSEMICOLON();
    if (s2 === peg$FAILED) {
      s2 = peg$parseNEWLINE();
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseWS();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseWS();
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }

    return s0;
  }

  function peg$parseSEMICOLON() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 59) {
      s0 = peg$c1;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

    return s0;
  }

  function peg$parseCOLON() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 58) {
      s0 = peg$c2;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }

    return s0;
  }

  function peg$parseDOT() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c3;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }

    return s0;
  }

  function peg$parseLPAREN() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 40) {
      s0 = peg$c4;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parseLBRACK() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 91) {
      s0 = peg$c5;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }

    return s0;
  }

  function peg$parseLBRACE() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 123) {
      s0 = peg$c6;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

    return s0;
  }

  function peg$parseCOMMA() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c7;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }

    return s0;
  }

  function peg$parsePERIOD() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c3;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

    return s0;
  }

  function peg$parseRPAREN() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 41) {
      s0 = peg$c8;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parseRBRACK() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 93) {
      s0 = peg$c9;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }

    return s0;
  }

  function peg$parseRBRACE() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 125) {
      s0 = peg$c10;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

    return s0;
  }

  function peg$parsePLUS() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c11;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

    return s0;
  }

  function peg$parseMINUS() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c12;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

    return s0;
  }

  function peg$parseSLASH() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 47) {
      s0 = peg$c13;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }

    return s0;
  }

  function peg$parseBSLASH() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r3.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }

    return s0;
  }

  function peg$parseEQUAL() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 61) {
      s0 = peg$c14;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }

    return s0;
  }

  function peg$parseLSS() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 60) {
      s0 = peg$c15;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }

    return s0;
  }

  function peg$parseGTR() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 62) {
      s0 = peg$c16;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }

    return s0;
  }

  function peg$parseAMPER() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 38) {
      s0 = peg$c17;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }

    return s0;
  }

  function peg$parseBANG() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 33) {
      s0 = peg$c18;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }

    return s0;
  }

  function peg$parseHAT() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 94) {
      s0 = peg$c19;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }

    return s0;
  }

  function peg$parsePERCENT() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 37) {
      s0 = peg$c20;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }

    return s0;
  }

  function peg$parseBAR() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 124) {
      s0 = peg$c21;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

    return s0;
  }

  function peg$parseUBAR() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 95) {
      s0 = peg$c22;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

    return s0;
  }

  function peg$parseASTERISK() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 42) {
      s0 = peg$c23;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }

    return s0;
  }

  function peg$parseDQUO() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r4.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }

    return s0;
  }

  function peg$parseSQUO() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r5.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }

    return s0;
  }

  function peg$parseBQUO() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r6.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }

    return s0;
  }

  function peg$parseNOT() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseBANG();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }

    return s0;
  }

  function peg$parseNEG() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseHAT();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }

    return s0;
  }

  function peg$parseSHL() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseLSS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLSS();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f1();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }

    return s0;
  }

  function peg$parseSHR() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseGTR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseGTR();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f2();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }

    return s0;
  }

  function peg$parseOR() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseBAR();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }

    return s0;
  }

  function peg$parseXOR() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseHAT();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }

    return s0;
  }

  function peg$parseAND() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseAMPER();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }

    return s0;
  }

  function peg$parseAND_NOT() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseAMPER();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHAT();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f3();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }

    return s0;
  }

  function peg$parseADD() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsePLUS();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }

    return s0;
  }

  function peg$parseSUB() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseMINUS();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }

    return s0;
  }

  function peg$parseMUL() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseASTERISK();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }

    return s0;
  }

  function peg$parseQUO() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseSLASH();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }

    return s0;
  }

  function peg$parseREM() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsePERCENT();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }

    return s0;
  }

  function peg$parseLAND() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseAMPER();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseAMPER();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f4();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }

    return s0;
  }

  function peg$parseLOR() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseBAR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBAR();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f5();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }

    return s0;
  }

  function peg$parseARROW() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseLSS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseMINUS();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f6();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }

    return s0;
  }

  function peg$parseINC() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsePLUS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePLUS();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f7();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }

    return s0;
  }

  function peg$parseDEC() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseMINUS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseMINUS();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f8();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }

    return s0;
  }

  function peg$parseEQL() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseEQUAL();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f9();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }

    return s0;
  }

  function peg$parseNEQ() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseBANG();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f10();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }

    return s0;
  }

  function peg$parseLEQ() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseLSS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f11();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }

    return s0;
  }

  function peg$parseGEQ() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseGTR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f12();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }

    return s0;
  }

  function peg$parseDEFINE() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseCOLON();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }

    return s0;
  }

  function peg$parseELLIPSIS() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseDOT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDOT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDOT();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }

    return s0;
  }

  function peg$parseASSIGN() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseEQUAL();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }

    return s0;
  }

  function peg$parseADD_ASSIGN() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsePLUS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f15();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }

    return s0;
  }

  function peg$parseSUB_ASSIGN() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseMINUS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f16();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }

    return s0;
  }

  function peg$parseMUL_ASSIGN() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseASTERISK();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f17();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }

    return s0;
  }

  function peg$parseQUO_ASSIGN() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseSLASH();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f18();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }

    return s0;
  }

  function peg$parseREM_ASSIGN() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsePERCENT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e92); }
    }

    return s0;
  }

  function peg$parseAND_ASSIGN() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseAMPER();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f20();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }

    return s0;
  }

  function peg$parseOR_ASSIGN() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseBAR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f21();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }

    return s0;
  }

  function peg$parseXOR_ASSIGN() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseHAT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUAL();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f22();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }

    return s0;
  }

  function peg$parseAND_NOT_ASSIGN() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseAMPER();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHAT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEQUAL();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f23();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e96); }
    }

    return s0;
  }

  function peg$parseSHL_ASSIGN() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseLSS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLSS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEQUAL();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f24();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }

    return s0;
  }

  function peg$parseSHR_ASSIGN() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseGTR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseGTR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEQUAL();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f25();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }

    return s0;
  }

  function peg$parseADDR() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseAMPER();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }

    return s0;
  }

  function peg$parseREFR() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseASTERISK();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }

    return s0;
  }

  function peg$parseWS() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r7.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e102); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r7.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e102); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }

    return s0;
  }

  function peg$parseCOMMENT_LINE() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c24) {
      s1 = peg$c24;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e104); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = input.charAt(peg$currPos);
      if (peg$r8.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e105); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e106); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = input.charAt(peg$currPos);
        if (peg$r8.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e106); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s3 = input.charAt(peg$currPos);
      if (peg$r8.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e105); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f26(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }

    return s0;
  }

  function peg$parseCOMMENT_MULTI() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c25) {
      s1 = peg$c25;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c26) {
        s5 = peg$c26;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e106); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c26) {
          s5 = peg$c26;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e109); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e106); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c26) {
        s3 = peg$c26;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f27(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e107); }
    }

    return s0;
  }

  function peg$parseIDENT() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseLETTER();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseLETTER();
      if (s3 === peg$FAILED) {
        s3 = peg$parseDIGIT();
        if (s3 === peg$FAILED) {
          s3 = peg$parseUBAR();
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseLETTER();
        if (s3 === peg$FAILED) {
          s3 = peg$parseDIGIT();
          if (s3 === peg$FAILED) {
            s3 = peg$parseUBAR();
          }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f28(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }

    return s0;
  }

  function peg$parseType() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$parseCompoundType();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLPAREN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseType();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRPAREN();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseTypeName();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }

    return s0;
  }

  function peg$parseTypeName() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c27) {
      s1 = peg$c27;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c28) {
        s1 = peg$c28;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e114); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c29) {
          s1 = peg$c29;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e115); }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f29(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }

    return s0;
  }

  function peg$parseCompoundType() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseArrayType();
    if (s0 === peg$FAILED) {
      s0 = peg$parseChannelType();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFunctionType();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePointerType();
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }

    return s0;
  }

  function peg$parsePointerType() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseASTERISK();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseType();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f30(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }

    return s0;
  }

  function peg$parseArrayType() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseLBRACK();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpression();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseRBRACK();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseType();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f31(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e118); }
    }

    return s0;
  }

  function peg$parseChannelType() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseChannelOutType();
    if (s0 === peg$FAILED) {
      s0 = peg$parseChannelInType();
      if (s0 === peg$FAILED) {
        s0 = peg$parseChannelDualType();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }

    return s0;
  }

  function peg$parseChannelDualType() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c30) {
      s1 = peg$c30;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e121); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseType();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f32(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }

    return s0;
  }

  function peg$parseChannelOutType() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseARROW();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (input.substr(peg$currPos, 4) === peg$c30) {
        s3 = peg$c30;
        peg$currPos += 4;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e121); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseWS();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseType();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f33(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e122); }
    }

    return s0;
  }

  function peg$parseChannelInType() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c30) {
      s1 = peg$c30;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e121); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseARROW();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseWS();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseType();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f34(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }

    return s0;
  }

  function peg$parseFunctionType() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c31) {
      s1 = peg$c31;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseFnParamListType();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseWS();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseType();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseWS();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f35(s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }

    return s0;
  }

  function peg$parseFnParamListType() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseLPAREN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseType();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parseWS();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c7;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parseWS();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parseType();
          if (s9 !== peg$FAILED) {
            s6 = [s6, s7, s8, s9];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parseWS();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c7;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parseWS();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s9 = peg$parseType();
            if (s9 !== peg$FAILED) {
              s6 = [s6, s7, s8, s9];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$parseWS();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseRPAREN();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f36(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseWS();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseLPAREN();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWS();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseRPAREN();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f37();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e126); }
    }

    return s0;
  }

  function peg$parseBlock() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseLBRACE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBD();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseStatementList();
      s4 = peg$parseBD();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseRBRACE();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f38(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }

    return s0;
  }

  function peg$parseStatementList() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseStatement();
    if (s3 !== peg$FAILED) {
      s4 = peg$parseBD();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parseStatement();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseBD();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f39(s1);
    s0 = s1;
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e128); }

    return s0;
  }

  function peg$parseDeclaration() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseConstDecl();
    if (s0 === peg$FAILED) {
      s0 = peg$parseVarDecl();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e129); }
    }

    return s0;
  }

  function peg$parseTopLevelDecl() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseDeclaration();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFunctionDecl();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e130); }
    }

    return s0;
  }

  function peg$parseConstDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c32) {
      s1 = peg$c32;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e132); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIDENT();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWS();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parseType();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseWS();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parseEQUAL();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseWS();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s9 = peg$parseExpression();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f40(s3, s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e131); }
    }

    return s0;
  }

  function peg$parseVarDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIDENT();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWS();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseType();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseWS();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              s8 = peg$parseEQUAL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseWS();
                if (s9 === peg$FAILED) {
                  s9 = null;
                }
                s10 = peg$parseExpression();
                if (s10 !== peg$FAILED) {
                  s7 = [s7, s8, s9, s10];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f41(s3, s5, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e133); }
    }

    return s0;
  }

  function peg$parseFnParamSubList() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseIDENT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c7;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseWS();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseIDENT();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseWS();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s5 = [s5, s6, s7, s8];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c7;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseWS();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parseIDENT();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseWS();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s5 = [s5, s6, s7, s8];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s4 = peg$parseType();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f42(s1, s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e135); }
    }

    return s0;
  }

  function peg$parseFnParamList() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseLPAREN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseFnParamSubList();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseWS();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = [];
        s6 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c7;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parseWS();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parseFnParamSubList();
          if (s9 !== peg$FAILED) {
            s10 = peg$parseWS();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            s7 = [s7, s8, s9, s10];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c7;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parseWS();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s9 = peg$parseFnParamSubList();
            if (s9 !== peg$FAILED) {
              s10 = peg$parseWS();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s7 = [s7, s8, s9, s10];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parseWS();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseRPAREN();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f43(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseWS();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseLPAREN();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWS();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseRPAREN();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f44();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e135); }
    }

    return s0;
  }

  function peg$parseFunctionDecl() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c31) {
      s1 = peg$c31;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIDENT();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWS();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parseFnParamList();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseWS();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$parseType();
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            s8 = peg$parseWS();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s9 = peg$parseBlock();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f45(s3, s5, s7, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e136); }
    }

    return s0;
  }

  function peg$parseOperand() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f46(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIDENT();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f47(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLPAREN();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseExpression();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseRPAREN();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f48(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e137); }
    }

    return s0;
  }

  function peg$parseLiteral() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseIntegerLit();
    if (s0 === peg$FAILED) {
      s0 = peg$parseStringLit();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFunctionLit();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBoolLit();
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e138); }
    }

    return s0;
  }

  function peg$parseNilLit() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c34) {
      s1 = peg$c34;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e140); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f49();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e139); }
    }

    return s0;
  }

  function peg$parseBoolLit() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e142); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c36) {
        s1 = peg$c36;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e143); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f50(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e141); }
    }

    return s0;
  }

  function peg$parseIntegerLit() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r2.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseUBAR();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseDIGIT();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseUBAR();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseDIGIT();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f51(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e144); }
    }

    return s0;
  }

  function peg$parseStringLit() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c37;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e146); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r1.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s3 === peg$FAILED) {
        s3 = input.charAt(peg$currPos);
        if (peg$r9.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e147); }
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r1.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s3 === peg$FAILED) {
          s3 = input.charAt(peg$currPos);
          if (peg$r9.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e147); }
          }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c37;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e146); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f52(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e145); }
    }

    return s0;
  }

  function peg$parseFunctionLit() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c31) {
      s1 = peg$c31;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFnParamListType();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWS();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseType();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseWS();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseBlock();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f53(s2, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e148); }
    }

    return s0;
  }

  function peg$parsePrimaryExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e150); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c39) {
        s1 = peg$c39;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e151); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLPAREN();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWS();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseType();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWS();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = [];
          s7 = peg$currPos;
          s8 = peg$parseCOMMA();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseWS();
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parseExpression();
            if (s10 !== peg$FAILED) {
              s11 = peg$parseWS();
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              s8 = [s8, s9, s10, s11];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$currPos;
            s8 = peg$parseCOMMA();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseWS();
              if (s9 === peg$FAILED) {
                s9 = null;
              }
              s10 = peg$parseExpression();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseWS();
                if (s11 === peg$FAILED) {
                  s11 = null;
                }
                s8 = [s8, s9, s10, s11];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          }
          s7 = peg$parseRPAREN();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f54(s1, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseOperand();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSelector();
        if (s3 === peg$FAILED) {
          s3 = peg$parseIndex();
          if (s3 === peg$FAILED) {
            s3 = peg$parseArguments();
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSelector();
          if (s3 === peg$FAILED) {
            s3 = peg$parseIndex();
            if (s3 === peg$FAILED) {
              s3 = peg$parseArguments();
            }
          }
        }
        peg$savedPos = s0;
        s0 = peg$f55(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e149); }
    }

    return s0;
  }

  function peg$parseSelector() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseDOT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIDENT();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f56(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e152); }
    }

    return s0;
  }

  function peg$parseIndex() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseLBRACK();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpression();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseRBRACK();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f57(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e153); }
    }

    return s0;
  }

  function peg$parseArguments() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseLPAREN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseRPAREN();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f58();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLPAREN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWS();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWS();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = [];
          s6 = peg$currPos;
          s7 = peg$parseCOMMA();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseWS();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s9 = peg$parseExpression();
            if (s9 !== peg$FAILED) {
              s10 = peg$parseWS();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s7 = [s7, s8, s9, s10];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$parseCOMMA();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseWS();
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              s9 = peg$parseExpression();
              if (s9 !== peg$FAILED) {
                s10 = peg$parseWS();
                if (s10 === peg$FAILED) {
                  s10 = null;
                }
                s7 = [s7, s8, s9, s10];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          s6 = peg$parseRPAREN();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f59(s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e154); }
    }

    return s0;
  }

  function peg$parseExpression() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseBinaryExprL1();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e155); }
    }

    return s0;
  }

  function peg$parseUnaryExpr() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseunary_op();
    if (s3 !== peg$FAILED) {
      s4 = peg$parseWS();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parseunary_op();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseWS();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    s2 = peg$parsePrimaryExpr();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f60(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e156); }
    }

    return s0;
  }

  function peg$parseBinaryExprL5() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseUnaryExpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parsemul_op();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseWS();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseUnaryExpr();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseWS();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s5 = [s5, s6, s7, s8];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parsemul_op();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseWS();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parseUnaryExpr();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseWS();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s5 = [s5, s6, s7, s8];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f61(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e157); }
    }

    return s0;
  }

  function peg$parseBinaryExprL4() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseBinaryExprL5();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseadd_op();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseWS();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseBinaryExprL5();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseWS();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s5 = [s5, s6, s7, s8];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseadd_op();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseWS();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parseBinaryExprL5();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseWS();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s5 = [s5, s6, s7, s8];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f62(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e158); }
    }

    return s0;
  }

  function peg$parseBinaryExprL3() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseBinaryExprL4();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parserel_op();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseWS();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseBinaryExprL4();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseWS();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s5 = [s5, s6, s7, s8];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parserel_op();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseWS();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parseBinaryExprL4();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseWS();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s5 = [s5, s6, s7, s8];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f63(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e159); }
    }

    return s0;
  }

  function peg$parseBinaryExprL2() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseBinaryExprL3();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseLAND();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseWS();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseBinaryExprL3();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseWS();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s5 = [s5, s6, s7, s8];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseLAND();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseWS();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parseBinaryExprL3();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseWS();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s5 = [s5, s6, s7, s8];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f64(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e160); }
    }

    return s0;
  }

  function peg$parseBinaryExprL1() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseBinaryExprL2();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseLOR();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseWS();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseBinaryExprL2();
        if (s7 !== peg$FAILED) {
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseLOR();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseWS();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parseBinaryExprL2();
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f65(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e161); }
    }

    return s0;
  }

  function peg$parseunary_op() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsePLUS();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f66();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseMINUS();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f67();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNOT();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f68();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNEG();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f69();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseADDR();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f70();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseREFR();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f71();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseARROW();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f72();
                }
                s0 = s1;
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e162); }
    }

    return s0;
  }

  function peg$parserel_op() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseEQL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNEQ();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLEQ();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLSS();
          if (s0 === peg$FAILED) {
            s0 = peg$parseGEQ();
            if (s0 === peg$FAILED) {
              s0 = peg$parseGTR();
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e163); }
    }

    return s0;
  }

  function peg$parseadd_op() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseADD();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSUB();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOR();
        if (s0 === peg$FAILED) {
          s0 = peg$parseXOR();
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e164); }
    }

    return s0;
  }

  function peg$parsemul_op() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseMUL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseQUO();
      if (s0 === peg$FAILED) {
        s0 = peg$parseREM();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSHL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSHR();
            if (s0 === peg$FAILED) {
              s0 = peg$parseAND();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAND_NOT();
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e165); }
    }

    return s0;
  }

  function peg$parseStatement() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseLabeledStmt();
    if (s0 === peg$FAILED) {
      s0 = peg$parseUnlabeledStatement();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e166); }
    }

    return s0;
  }

  function peg$parseSimpleStatement() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseDeclaration();
    if (s0 === peg$FAILED) {
      s0 = peg$parseIncDecStmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAssignment();
        if (s0 === peg$FAILED) {
          s0 = peg$parseExpressionStmt();
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e167); }
    }

    return s0;
  }

  function peg$parseUnlabeledStatement() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseDeclaration();
    if (s0 === peg$FAILED) {
      s0 = peg$parseGoStmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseReturnStmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBreakStmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parseContinueStmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseGotoStmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parseFallthroughStmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseBlock();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseIfStmt();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseSwitchStmt();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseSelectStmt();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseForStmt();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseDeferStmt();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseGoStmt();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseChanStmt();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseIncDecStmt();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseAssignment();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseExpressionStmt();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e168); }
    }

    return s0;
  }

  function peg$parseLabeledStmt() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseIDENT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseCOLON();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseWS();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseUnlabeledStatement();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f73(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e169); }
    }

    return s0;
  }

  function peg$parseExpressionStmt() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseExpression();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f74(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e170); }
    }

    return s0;
  }

  function peg$parseChanStmt() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseExpression();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseWS();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseARROW();
    if (s3 !== peg$FAILED) {
      s4 = peg$parseWS();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseExpression();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f75(s1, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e171); }
    }

    return s0;
  }

  function peg$parseIncDecStmt() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseINC();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f76(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWS();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseDEC();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f77(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e172); }
    }

    return s0;
  }

  function peg$parseAssignment() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseIDENT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseCOLON();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseEQUAL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseWS();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseExpression();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f78(s1, s3, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e173); }
    }

    return s0;
  }

  function peg$parseIfStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c40) {
      s1 = peg$c40;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e175); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsePreClause();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseWS();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseExpression();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseWS();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseBlock();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseWS();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parseElseClause();
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f79(s3, s5, s7, s9);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e174); }
    }

    return s0;
  }

  function peg$parsePreClause() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseSimpleStatement();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseSEMICOLON();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f80(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e176); }
    }

    return s0;
  }

  function peg$parseElseClause() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c41) {
      s1 = peg$c41;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e178); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseIfStmt();
      if (s3 === peg$FAILED) {
        s3 = peg$parseBlock();
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f81(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e177); }
    }

    return s0;
  }

  function peg$parseSwitchStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c42) {
      s1 = peg$c42;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e180); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePreClause();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseWS();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseExpression();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseWS();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseLBRACE();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseWS();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parseBD();
          if (s9 !== peg$FAILED) {
            s10 = [];
            s11 = peg$currPos;
            s12 = peg$parseCaseClause();
            if (s12 !== peg$FAILED) {
              s13 = peg$parseBD();
              if (s13 !== peg$FAILED) {
                s12 = [s12, s13];
                s11 = s12;
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
            while (s11 !== peg$FAILED) {
              s10.push(s11);
              s11 = peg$currPos;
              s12 = peg$parseCaseClause();
              if (s12 !== peg$FAILED) {
                s13 = peg$parseBD();
                if (s13 !== peg$FAILED) {
                  s12 = [s12, s13];
                  s11 = s12;
                } else {
                  peg$currPos = s11;
                  s11 = peg$FAILED;
                }
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
            }
            s11 = peg$parseWS();
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            s12 = peg$parseRBRACE();
            if (s12 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f82(s3, s5, s10);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e179); }
    }

    return s0;
  }

  function peg$parseCaseClause() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseExprSwitchCase();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseCOLON();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseWS();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseLBRACE();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseBD();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = [];
          s8 = peg$currPos;
          s9 = peg$parseUnlabeledStatement();
          if (s9 !== peg$FAILED) {
            s10 = peg$parseBD();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            s9 = [s9, s10];
            s8 = s9;
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$currPos;
            s9 = peg$parseUnlabeledStatement();
            if (s9 !== peg$FAILED) {
              s10 = peg$parseBD();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s9 = [s9, s10];
              s8 = s9;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          }
          s8 = peg$parseRBRACE();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f83(s1, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseExprSwitchCase();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWS();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseCOLON();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWS();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parseUnlabeledStatement();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f84(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e181); }
    }

    return s0;
  }

  function peg$parseExprSwitchCase() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c43) {
      s1 = peg$c43;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e183); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseExpression();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f85(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c44) {
        s1 = peg$c44;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e184); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f86();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e182); }
    }

    return s0;
  }

  function peg$parseForStmt() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c45) {
      s1 = peg$c45;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e186); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseForClause();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseWS();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseBlock();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f87(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c45) {
        s1 = peg$c45;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e186); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWS();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseBlock();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f88(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e185); }
    }

    return s0;
  }

  function peg$parseForClause() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseSimpleStatement();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseBD();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseExpression();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseBD();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseSimpleStatement();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f89(s1, s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseExpression();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      peg$savedPos = s0;
      s1 = peg$f90(s1);
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e187); }
    }

    return s0;
  }

  function peg$parseGoStmt() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c46) {
      s1 = peg$c46;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e189); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseExpression();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f91(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e188); }
    }

    return s0;
  }

  function peg$parseSelectStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e191); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseLBRACE();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseBD();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseWS();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = [];
        s7 = peg$currPos;
        s8 = peg$parseCommClause();
        if (s8 !== peg$FAILED) {
          s9 = peg$parseBD();
          if (s9 !== peg$FAILED) {
            s8 = [s8, s9];
            s7 = s8;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$currPos;
          s8 = peg$parseCommClause();
          if (s8 !== peg$FAILED) {
            s9 = peg$parseBD();
            if (s9 !== peg$FAILED) {
              s8 = [s8, s9];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        }
        s7 = peg$parseBD();
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = peg$parseWS();
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = peg$parseRBRACE();
        if (s9 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f92(s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e190); }
    }

    return s0;
  }

  function peg$parseCommClause() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseCommCase();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseCOLON();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseWS();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseLBRACE();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseBD();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = [];
          s8 = peg$currPos;
          s9 = peg$parseUnlabeledStatement();
          if (s9 !== peg$FAILED) {
            s10 = peg$parseBD();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            s9 = [s9, s10];
            s8 = s9;
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$currPos;
            s9 = peg$parseUnlabeledStatement();
            if (s9 !== peg$FAILED) {
              s10 = peg$parseBD();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s9 = [s9, s10];
              s8 = s9;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          }
          s8 = peg$parseRBRACE();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f93(s1, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCommCase();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWS();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseCOLON();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWS();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parseUnlabeledStatement();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f94(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e192); }
    }

    return s0;
  }

  function peg$parseCommCase() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c43) {
      s1 = peg$c43;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e183); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c48) {
          s3 = peg$c48;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e194); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWS();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parseIDENT();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f95(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c43) {
        s1 = peg$c43;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e183); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIDENT();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseWS();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (input.substr(peg$currPos, 2) === peg$c48) {
              s5 = peg$c48;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e194); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseWS();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              s7 = peg$parseExpression();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f96(s3, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c43) {
          s1 = peg$c43;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e183); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseWS();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseIDENT();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseWS();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c14;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e39); }
              }
              if (s5 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c49) {
                  s5 = peg$c49;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e195); }
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseWS();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (input.substr(peg$currPos, 2) === peg$c48) {
                  s7 = peg$c48;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e194); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseWS();
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  s9 = peg$parseIDENT();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f97(s3, s5, s9);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c44) {
            s1 = peg$c44;
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e184); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f98();
          }
          s0 = s1;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e193); }
    }

    return s0;
  }

  function peg$parseReturnStmt() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c50) {
      s1 = peg$c50;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e197); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseExpression();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f99(s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e196); }
    }

    return s0;
  }

  function peg$parseBreakStmt() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c51) {
      s1 = peg$c51;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e199); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseIDENT();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f100(s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e198); }
    }

    return s0;
  }

  function peg$parseContinueStmt() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c52) {
      s1 = peg$c52;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e201); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseIDENT();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f101(s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e200); }
    }

    return s0;
  }

  function peg$parseGotoStmt() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c53) {
      s1 = peg$c53;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e203); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseIDENT();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f102(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e202); }
    }

    return s0;
  }

  function peg$parseFallthroughStmt() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c54) {
      s1 = peg$c54;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e205); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f103();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e204); }
    }

    return s0;
  }

  function peg$parseDeferStmt() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c55) {
      s1 = peg$c55;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e207); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseExpression();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f104(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e206); }
    }

    return s0;
  }

  function peg$parseEOF() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = undefined;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e208); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "TOPLEVEL"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
